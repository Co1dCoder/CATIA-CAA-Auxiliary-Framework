//===================================================================
// COPYRIGHT Tony 2017/03/24
//===================================================================
// PLMEnhancement.cpp
// Header definition of class PLMEnhancement
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/03/24 Creation: Code generated by the 3DS wizard
//===================================================================

#include "PLMEnhancement.h"

namespace JNCTonySpace{

HRESULT GetTransformationInConext(CATIPLMNavOccurrence_var ispEnvOcc, CATIPLMNavOccurrence_var ispOcc, CATMathTransformation &oTrans)
{
	HRESULT hr = S_OK;
	if (ispEnvOcc == NULL_var)
	{
		//获取绝对位置信息
		CATIMovable_var spiFirstMovable = ispOcc;
		if (spiFirstMovable == NULL_var)
		{
			cout<<" -- 查询CATMovable接口失败！"<<endl;
			return E_FAIL;
		}

		spiFirstMovable ->GetAbsPosition(oTrans);
		return S_OK;
	}
	else
	{
		CATIMovable_var spiFirstMov = ispOcc;
		CATIMovable_var spiSecondMov = ispEnvOcc;
		if ((spiFirstMov == NULL_var) || (spiSecondMov == NULL_var))
		{
			cout<<" -- 查询CATMovable接口失败！"<<endl;
			return E_FAIL;
		}

		oTrans = spiFirstMov ->GetPosition(spiSecondMov);
		return S_OK;
	}
}

HRESULT SearchPublicationByName( CATIPrdObject_var ispNavRef, CATUnicodeString name ,CATBaseUnknown **  opPubUN)
{
	HRESULT hr =E_FAIL;
	CATIPrdPublications * piPrdPublications = NULL;
	if (ispNavRef->IsReference())
	{
		ispNavRef->QueryInterface(IID_CATIPrdPublications, (void**)& piPrdPublications);
	}
	else
	{
		CATIPLMNavReference * piRef=NULL;
		ispNavRef->GetReferenceObject((CATBaseUnknown*&) piRef, IID_CATIPLMNavReference);
		if ( piRef) 
		{
			hr = piRef->QueryInterface(IID_CATIPrdPublications, (void**)& piPrdPublications);
			piRef->Release();
			piRef = NULL;
		}
	}

	if( NULL  != piPrdPublications )
	{
		CATIPrdPublication_var  spPrdPub;
		if (SUCCEEDED(piPrdPublications->GetByName (name, spPrdPub)))
		{
			hr = spPrdPub->QueryInterface(IID_CATBaseUnknown,(void**) opPubUN);
		}
		piPrdPublications->Release();
		piPrdPublications = NULL;
	}
	return hr;
}

CATIAssemblyConstraint_var AddConstrainWithNoPub(CATIPLMNavReference_var ispiNavRefRoot,
												 CATBaseUnknown_var iConnectObject1,CATBaseUnknown_var iConnectObject1_Ins,CATBaseUnknown_var iConnectObjec1_RepIns,
												 CATBaseUnknown_var iConnectObject2,CATBaseUnknown_var iConnectObjec2_Ins,CATBaseUnknown_var iConnectObjec2_RepIns,
												 CATIAssemblyConstraint::Type iConstrainType,CATIEngConnection::Type iEngConnectionType,  CATIAssemblyConstraint::Option Opt)															
{
	HRESULT hr = E_FAIL;
	CATIAssemblyConstraint_var spiAsmConstraint = NULL_var;

	int rcEngCntCreation = -1;
	int rcConstCreation = -1;

	CATIPLMComponent_var spInsPLMComponent1 = NULL_var;
	spInsPLMComponent1 = iConnectObject1_Ins;

	if(NULL_var == spInsPLMComponent1)
		return NULL_var;

	CATIPLMComponent_var spRepInsPLMComponent2 = NULL_var;
	spRepInsPLMComponent2 = iConnectObjec2_RepIns;

	if(NULL_var == spRepInsPLMComponent2) 
		return NULL_var;

	CATIEngConnectionManager_var spEngConnectionManager = NULL_var;
	spEngConnectionManager = ispiNavRefRoot;

	if (NULL_var == spEngConnectionManager) 
		return NULL_var;
	CATBaseUnknown *pBaseFea1 = NULL;
	iConnectObject1->QueryInterface(IID_CATBaseUnknown,(void**)&pBaseFea1);
	CATBaseUnknown *pBaseFea2 = NULL;

	iConnectObject2->QueryInterface(IID_CATBaseUnknown,(void**)&pBaseFea2);
	CATIPLMProducts_var spProductsOnRoot=ispiNavRefRoot;

	CATListValCATBaseUnknown_var PFI1;
	PFI1.Append(iConnectObject1_Ins);

	CATListValCATBaseUnknown_var PFI2;
	PFI2.Append(iConnectObjec2_Ins);

	CATListValCATBaseUnknown_var PFI3;
	PFI3.Append(iConnectObjec2_RepIns);

	CATLISTP(CATIPLMComponent)  iPathOfInstances1; 

	for (int i=1 ; i <= PFI1.Size() ; i++)
	{
		CATIPLMComponent_var spPLMComponent =PFI1[i];

		iPathOfInstances1.Append (spPLMComponent); spPLMComponent->AddRef();
	}

	CATLISTP(CATIPLMComponent)  iPathOfInstances2; 

	for ( int i=1 ; i <= PFI2.Size() ; i++)
	{
		CATIPLMComponent_var spPLMComponent =PFI2[i];
		iPathOfInstances2.Append (spPLMComponent); spPLMComponent->AddRef();
	}

	CATLISTP(CATIPLMComponent)  iPathOfInstances3; 

	CATOmbObjectInContext  * objectInContext1 = NULL;
	CATOmbObjectInContext  * objectInContext2 = NULL;

	CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances1,NULL,pBaseFea1,objectInContext1);
	CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances3,spRepInsPLMComponent2,pBaseFea2,objectInContext2);

	if (objectInContext1==NULL)
	{
		cout<<"objectInContext111==NULL"<<endl;
		return NULL_var;
	}
	if (objectInContext2==NULL)
	{
		cout<<"objectInContext2222==NULL"<<endl;
		return NULL_var;
	}

	CATOmbObjectInContext  * impactedInContext1 = NULL;
	CATOmbObjectInContext  * impactedInContext2 = NULL;

	CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances1 , NULL ,  NULL , impactedInContext1);
	CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances3 ,spRepInsPLMComponent2 ,NULL,impactedInContext2);

	if (impactedInContext1==NULL)
	{
		cout<<"impactedInContext111==NULL"<<endl;
		return NULL_var;
	}

	if (impactedInContext2==NULL)
	{
		cout<<"impactedInContext2222==NULL"<<endl;
		return NULL_var;
	}

	CATListValCATBaseUnknown_var  listOfImpacted;

	CATBaseUnknown_var spImp1=impactedInContext1;
	CATBaseUnknown_var spImp2=impactedInContext2;

	listOfImpacted.Append( spImp1 );
	listOfImpacted.Append( spImp2 );

	CATIEngConnection* piEngCnt=NULL;
	spEngConnectionManager->CreateEngConnection (iEngConnectionType,&listOfImpacted,piEngCnt);

	// First can move
	hr = piEngCnt->SetDirection( 1, CATIEngConnection::Direction_Out); 
	hr = piEngCnt->SetDirection( 2, CATIEngConnection::Direction_In);

	int oNbImpacted=0;

	hr = piEngCnt->GetNbImpacted (oNbImpacted) ;
	if (oNbImpacted!=2)
	{
		return NULL_var;
	}

	CATIAssemblyConstraintManager_var spAssemblyConstraintManager=piEngCnt;
	CATListValCATBaseUnknown_var  listOfGeometry;

	if ( NULL_var == spAssemblyConstraintManager)
	{
		return NULL_var;
	}

	CATBaseUnknown_var spGeo1=objectInContext1;
	CATBaseUnknown_var spGeo2=objectInContext2;

	listOfGeometry.Append( spGeo1 );
	listOfGeometry.Append( spGeo2 );

	CATIAssemblyConstraint* piAssemblyConstraint = NULL;    
	spAssemblyConstraintManager->AddAssemblyConstraint (iConstrainType, &listOfGeometry , piAssemblyConstraint );

	if(piAssemblyConstraint!=NULL)
	{
		int iNBOptions=0;

		piAssemblyConstraint->GetNbOptions(iNBOptions);
		if(iNBOptions==1)

			piAssemblyConstraint->SetOption(1,Opt);

		piAssemblyConstraint->SetActivity(TRUE);

		spiAsmConstraint = piAssemblyConstraint;
		piAssemblyConstraint->Release();

		piAssemblyConstraint = NULL;

	}

	return spiAsmConstraint;
}


void ReframeOnTargetOcc( CATIPLMNavOccurrence_var spiOcc )
{
	HRESULT rlt = S_FALSE;

	// retirve the current window
	CATFrmLayout *pLayout = NULL;
	pLayout = CATFrmLayout::GetCurrentLayout();
	if (NULL == pLayout)
		rlt = E_FAIL;

	CATFrmWindow *pCurrentWindow = NULL;
	if (SUCCEEDED(rlt))
		pCurrentWindow = pLayout->GetCurrentWindow();
	if (NULL == pCurrentWindow)
		rlt = E_FAIL;

	// Get the viwer object
	CAT3DViewer *p3DViewer = NULL;
	if (SUCCEEDED(rlt))
		p3DViewer = (CAT3DViewer*)pCurrentWindow->GetViewer();
	if (NULL == p3DViewer)
		rlt = E_FAIL;


	// get the 3D Rep Box
	CAT3DBoundingSphere bs;	
	if (SUCCEEDED(rlt))
	{
		CATI3DGeoVisu_var spi3DGeoVis = NULL_var;
		spi3DGeoVis = spiOcc;
		CATRep *pRep = NULL;
		if (NULL_var != spi3DGeoVis)
			pRep = spi3DGeoVis->GiveRep();

		CAT3DRep *p3DRep = NULL;
		if (NULL != pRep)
			p3DRep = (CAT3DRep*)pRep;

		if (NULL != p3DRep)
			bs = p3DRep->GetBoundingElement();
		else
			rlt = E_FAIL;
	}

	// reframe on the object
	if (SUCCEEDED(rlt))
		p3DViewer->ReframeOn(bs);

}

void GetCommonRootOcc( CATListPtrCATIPLMNavOccurrence& ilstOcc, CATIPLMNavOccurrence_var& oCommonRootOcc )
{
	oCommonRootOcc = NULL_var;
	if (ilstOcc.Size() == 0)
		return;

	if (ilstOcc.Size() == 1)
	{
		oCommonRootOcc = ilstOcc[1];
		return;
	}

	std::vector<CATListPtrCATBaseUnknown> vecRoots;
	bool flag_Ok = true;
	for (int i = 1; i<= ilstOcc.Size(); i++)
	{
		CATListPtrCATBaseUnknown lstPathEle;
		lstPathEle.RemoveAll();
		CATIBuildPath_var spPathTool = ilstOcc[i];
		CATPathElement * pPath = NULL;
		spPathTool->ExtractPathElement(NULL,&pPath);
		if (NULL == pPath)
		{
			flag_Ok = false;
			break;
		}

		int sizeOfThePath = pPath->GetSize();  
		for ( int j = 0 ; j < sizeOfThePath ; j++ )
		{
			CATBaseUnknown * pElt = (*pPath)[j] ;
			if ( NULL != pElt )
				lstPathEle.Append(pElt);
		}

		vecRoots.push_back(lstPathEle);
	}

	if (!flag_Ok )
		return;

	while (true)
	{
		bool isSame = true;
		CATIPLMNavOccurrence_var spOccTobeTest = NULL_var;
		CATIPLMNavOccurrence_var spEach = NULL_var;

		for (int i = 0; i < vecRoots.size(); i++)
		{
			if (vecRoots[i].Size() == 0)
			{
				isSame = false;
				break;
			}

			spEach = vecRoots[i][1];
			vecRoots[i].RemovePosition(1);
			if (0 == i)
			{
				spOccTobeTest = spEach;
				continue;
			}

			if (1 != spEach->IsEqual(spOccTobeTest))
			{
				isSame = false;
				break;
			}
		}

		if (isSame)
			oCommonRootOcc = spOccTobeTest;
		else 
			break;
	}
}

HRESULT ConvertOcc2OmbContext( CATIPLMNavOccurrence_var spiPLMOcc,CATOmbObjectInContext_var &spOmbObjectCtx )
{
	if (NULL_var == spiPLMOcc)
		return E_FAIL;

	CATIBuildPath_var spiBuildPath = spiPLMOcc;	
	if (NULL_var == spiBuildPath)
		return E_FAIL;

	CATPathElement *pPathEle = NULL;
	spiBuildPath->ExtractPathElement(NULL,&pPathEle);
	if (NULL == pPathEle)
		return E_FAIL;

	CATIPrdObjectInContextUI * piPrdObjInContextUI = NULL;
	::CATInstantiateComponent("CATPrdUIFactory",IID_CATIPrdObjectInContextUI,(void**)&piPrdObjInContextUI);
	if (NULL == piPrdObjInContextUI)
		return E_FAIL;

	CATOmbObjectInContext *pOmbObjectCtx = NULL;
	piPrdObjInContextUI->ComputeObjectInContextFromPathElement(*pPathEle,FALSE,NULL,pOmbObjectCtx);
	spOmbObjectCtx = pOmbObjectCtx;
	if (NULL_var == spOmbObjectCtx)
		return E_FAIL;

	return S_OK;
}

HRESULT ConvertOmbContext2Occ( CATOmbObjectInContext_var ispOmbObjectCtx, CATIPLMNavOccurrence_var& ospResultOcc )
{
	ospResultOcc = NULL_var;
	if (NULL_var == ispOmbObjectCtx)
		return E_UNEXPECTED;

	CATLISTP(CATIPLMComponent) lstPtrPathCmps;
	ispOmbObjectCtx->GetPathOfInstances(lstPtrPathCmps);
	if (0 == lstPtrPathCmps.Size())
		return E_FAIL;

	CATIPLMComponent* piRootInOIC = NULL;
	ispOmbObjectCtx->GetContextRootReference(piRootInOIC);
	CATIPLMNavReference_var spRootRef = piRootInOIC;
	if (NULL != piRootInOIC){piRootInOIC->Release();piRootInOIC = NULL;}

	CATIPLMNavOccurrence_var spRootOcc = NULL_var;
	CATIPrdOccurrenceMngt* occMngt = NULL;
	if(SUCCEEDED(CATPrdGetOccurrenceMngt(occMngt)) && occMngt)
		occMngt -> GetOrCreateRootOccurrence(spRootRef,spRootOcc);
	else
		return E_FAIL;

	if (NULL_var == spRootOcc)
		return E_FAIL;

	CATListPtrCATIPLMNavInstance lstPathInsts;
	for (int iIndex = 1; iIndex <= lstPtrPathCmps.Size(); iIndex++)
	{
		CATIPLMNavInstance_var spiInst = lstPtrPathCmps.operator[](iIndex);
		if (NULL_var == spiInst)
			continue;

		spiInst->AddRef(); // !! ?
		lstPathInsts.Append(spiInst);
	}

	if (0 == lstPathInsts.Size())
		return E_FAIL;

	// 获取子对象List Occ
	CATListPtrCATIPLMNavOccurrence lstChildrenOcc;
	spRootOcc->ListChildren(lstChildrenOcc);

	// 查找
	for (int iIndex_Inst = 1;iIndex_Inst <= lstPathInsts.Size();iIndex_Inst++)
	{
		CATBoolean Flag_FindInst = FALSE;
		CATIPLMNavOccurrence_var spiChildOcc = NULL_var;

		for (int iIndex_Child = 1;iIndex_Child <= lstChildrenOcc.Size(); iIndex_Child++)
		{
			spiChildOcc = lstChildrenOcc.operator[](iIndex_Child);

			CATIPLMNavInstance *piChildInst = NULL;
			spiChildOcc->GetRelatedInstance(piChildInst);
			if (NULL == piChildInst)
				continue;

			if (TRUE == piChildInst->IsEqual(lstPathInsts.operator[](iIndex_Inst)))
			{
				Flag_FindInst = TRUE;
				piChildInst->Release();
				piChildInst = NULL;
				break;
			}

			piChildInst->Release();
			piChildInst = NULL;
		}

		if (TRUE == Flag_FindInst)
		{
			if (iIndex_Inst == lstPathInsts.Size())
			{
				ospResultOcc = spiChildOcc;
				break;
			}
			else
			{
				lstChildrenOcc.RemoveAll();
				spiChildOcc->ListChildren(lstChildrenOcc);
			}		
		}
	}

	lstPathInsts.RemoveAll();

	if (NULL_var == ospResultOcc)
		return E_FAIL;
	else 
		return S_OK;
}

CATUnicodeString GetRefTypeName( CATBaseUnknown_var ispPLMEntity )
{
	CATUnicodeString str_TypeName = "";

	CATIPLMNavReference_var spRef = ispPLMEntity;
	CATIPLMNavOccurrence_var spOcc = ispPLMEntity;
	CATIPLMNavInstance_var spIns = ispPLMEntity;
	if (NULL_var == spRef)
	{
		CATIPLMNavReference* piRef = NULL;
		if (NULL_var != spOcc)
		{
			spOcc->GetRelatedReference(piRef);
			spRef = piRef;			
		}
		else if (NULL_var != spIns)
		{
			spIns->GetReferenceInstanceOf(piRef);
			spRef = piRef;
		}
		if (NULL != piRef){piRef->Release();piRef = NULL;}
	}
	

	if (!!spRef)
	{
		CATIPLMComponent_var spComp = spRef;
		if (!!spComp)
		{
			CATIAdpType *piAdpType = NULL;
			spComp->GetAdpType(piAdpType);
			if (NULL != piAdpType)
			{
				CATIType* piType = NULL;
				CATPLMTypeServices::GetKweTypeFromAdpType(piAdpType,piType);
				if (NULL != piType)
				{
					str_TypeName = piType->Name();
					piType->Release();
					piType = NULL;
				}
				piAdpType->Release();
				piAdpType = NULL;
			}
		}
	}

	return str_TypeName;
}

void GetOccRecursively( CATIPLMNavOccurrence_var ispOcc, CATUnicodeString iRefType, CATListPtrCATIPLMNavOccurrence& ioList )
{
	if (NULL_var == ispOcc)
		return;

	CATUnicodeString str_TypeName = "";
	str_TypeName = GetRefTypeName(ispOcc);

	if (0 == ioList.Locate(ispOcc))
	{
		if (str_TypeName == iRefType)
			ioList.Append(ispOcc);

		CATListPtrCATIPLMNavOccurrence lst_ChildOcc;
		ispOcc->ListChildren(lst_ChildOcc);
		for (int i = 1; i <= lst_ChildOcc.Size(); i++)
			GetOccRecursively(lst_ChildOcc[i],iRefType,ioList);
	}

	return ;

}

void GetOccRecursively( CATIPLMNavOccurrence_var ispOcc, OccJudgeMethod iMethod, CATListPtrCATIPLMNavOccurrence& ioList )
{
	if (NULL_var == ispOcc)
		return;

	if (0 == ioList.Locate(ispOcc))
	{
		if ((*iMethod)(ispOcc))
			ioList.Append(ispOcc);

		CATListPtrCATIPLMNavOccurrence lst_ChildOcc;
		ispOcc->ListChildren(lst_ChildOcc);
		for (int i = 1; i <= lst_ChildOcc.Size(); i++)
			GetOccRecursively(lst_ChildOcc[i],iMethod,ioList);
	}

	return ;
}

}
