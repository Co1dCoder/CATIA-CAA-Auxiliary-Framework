//===================================================================
// COPYRIGHT Tony 2017/03/24
//===================================================================
// PLMEnhancement.cpp
// Header definition of class PLMEnhancement
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/03/24 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef PLMEnhancement_H
#define PLMEnhancement_H

#include "CommonFuncMod.h"

// C++
#include <iostream>
#include <vector>
using std::cout;
using std::endl;

// System
#include "CATUnicodeString.h"
#include "CATIUnknownList.h"
#include "CATLISTP_CATBaseUnknown.h"
#include "CATInstantiateComponent.h"

// CATPLMComponentInterfaces
#include "CATIPLMNavOccurrence.h"
#include "CATIPLMNavReference.h"
#include "CATIPLMNavInstance.h"
#include "CATIPLMNavRepInstance.h"
#include "CATListPtrCATIPLMNavInstance.h"
#include "CATListPtrCATIPLMNavOccurrence.h"

// ProductStructureInterfaces
#include "CATIPrdObject.h"
#include "CATIPLMProducts.h"
#include "CATIPrdOccurrenceMngt.h"
#include "CATPrdGetOccurrenceMngt.h"

// ProductStructureUseItf
#include "CATIPrdPublications.h"
#include "CATIPrdPublication.h"

// Mathematics
#include "CATMathTransformation.h"

// PLMModelerBaseInterfaces
#include "CATIMovable.h"

// ObjectModelerBase
#include "CATOmbObjectInContext.h"

// CATEngConnectionUseItf
#include "CATIEngConnectionManager.h"
#include "CATIEngConnection.h"

// CATAssemblyConstraintUseItf
#include "CATIAssemblyConstraintManager.h"
#include "CATIAssemblyConstraint.h"

// CATPLMUpdateUseItf
#include "CATIPLMUpdateEngine.h"
#include "CATPLMUpdateFactory.h"

// CATPLMIdentificationAccess 
#include "CATIPLMComponent.h"
#include "CATListPtrCATIPLMComponent.h"

// AfrFoundation 
#include "CATFrmLayout.h"
#include "CATFrmWindow.h"

// VisualizationController 
#include "CAT3DViewer.h"

// VisualizationFoundation 
#include "CAT3DBoundingSphere.h"
#include "CAT3DRep.h"

// VisualizationInterfaces
#include "CATI3DGeoVisu.h"
#include "CATIBuildPath.h"
#include "CATPathElement.h"
#include "CATListOfCATPathElement.h"

// VPMEditorInterfaces
#include "CATIPrdObjectInContextUI.h"

// KnowledgeInterfaces
#include "CATIType.h"
#include "CATPLMTypeServices.h"
#include "CATIAdpType.h"

//-----------------------------------------------------------------------

namespace JNCTonySpace
{
	/**
	* Get the Transformation of Occurrence in a given context.
	* <br><b>Role</b>: If you want to get the global Transformation, 
	* just set ispEnvOcc as a NULL_var.
	*   @param ispEnvOcc 
	*      The context Occurrence.
	*   @param ispOcc
	*      The target Occurrence.
	*   @param oTrans
	*      The output MathTransformation.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if Transformation is successfully retrieved.
	*   <dt><tt>E_FAIL</tt>        <dd>Otherwise.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTransformationInConext(CATIPLMNavOccurrence_var ispEnvOcc, CATIPLMNavOccurrence_var ispOcc, CATMathTransformation &oTrans);

	/**
	* Search PLM Object's publication 
	*   @param ispNavRef 
	*      The Object to be searched.
	*   @param istrName
	*      The publiction name.
	*   @param opPubUnknown
	*      The output publiction feature's handler.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if get the feature successfully.
	*   <dt><tt>E_FAIL</tt>        <dd>Otherwise.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT SearchPublicationByName( CATIPrdObject_var ispNavRef, CATUnicodeString istrName ,CATBaseUnknown ** opPubUnknown);

	/**
	* Creating Constraint between two none public feature 
	*   @param ispNavRefRoot 
	*      The Contraint's root Reference
	*   @param iConnectObject1, iConnectObject2
	*      The connection features.
	*   @param iConnectObject1_Ins, iConnectObject2_Ins
	*      The feature's Instance .
	*   @param iConnectObjec1_RepIns, iConnectObjec2_RepIns
	*      The feature's RepInstance .
	*   @param iConstrainType 
	*      The Contraint's type
	*   @param iEngConnectionType 
	*      The Connection's type
	*   @param Opt 
	*      The Contraint's option
	*	@return
	*   <dl> the result AssemblyConstraint smart pointer
	*/
	ExportedByCommonFuncMod CATIAssemblyConstraint_var AddConstrainWithNoPub(CATIPLMNavReference_var ispNavRefRoot, 
															CATBaseUnknown_var iConnectObject1,CATBaseUnknown_var iConnectObject1_Ins,CATBaseUnknown_var iConnectObjec1_RepIns, 
															CATBaseUnknown_var iConnectObject2,CATBaseUnknown_var iConnectObjec2_Ins,CATBaseUnknown_var iConnectObjec2_RepIns,
															CATIAssemblyConstraint::Type iConstrainType,CATIEngConnection::Type iEngConnectionType, CATIAssemblyConstraint::Option Opt);

	/**
	* Reframe on input Occurrence in current window
	*   @param ispOcc 
	*      The Occurrence to be reframed on.
	*/
	ExportedByCommonFuncMod void ReframeOnTargetOcc(CATIPLMNavOccurrence_var ispOcc);

	/**
	* Get the deepest common root occurrence of a list of occurrence.
	*   @param ilstOcc 
	*      The input list of Occurrence.
	*   @param oCommonRootOcc
	*      The output common root Occurrence. 
	*/
	ExportedByCommonFuncMod void GetCommonRootOcc(CATListPtrCATIPLMNavOccurrence& ilstOcc, CATIPLMNavOccurrence_var& oCommonRootOcc);

	/**
	* Convert the input occurrence to OIC
	*   @param ispPLMOcc 
	*      The input Occurrence.
	*   @param ospOmbObjectCtx
	*      The output OIC.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if convertion succeed.
	*   <dt><tt>E_FAIL</tt>        <dd>Otherwise.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT ConvertOcc2OmbContext(CATIPLMNavOccurrence_var ispPLMOcc,CATOmbObjectInContext_var &ospOmbObjectCtx);

	/**
	* Convert the input OIC to Occurrence in current session
	*   @param ispOmbObjectCtx 
	*      The input OIC.
	*   @param ospResultOcc
	*      The output occurrence.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if convertion succeed.
	*   <dt><tt>E_FAIL</tt>        <dd>Otherwise.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT ConvertOmbContext2Occ(CATOmbObjectInContext_var ispOmbObjectCtx, CATIPLMNavOccurrence_var& ospResultOcc);

	/**
	* Get reference type name
	* This method support Occurrence\Instance\Reference
	*	@param ispPLMEntity
	*		The input PLM Object.
	*	@return
	*		The Type name of reference
	*/
	ExportedByCommonFuncMod CATUnicodeString GetRefTypeName(CATBaseUnknown_var ispPLMEntity);



	/**
	* Get child Occurrences Recursively with specific reference type,
	* The function will filter the repeated object.
	*	@param ispOcc
	*		The input Occ to be searched.
	*	@param iRefType
	*		The specified reference type
	*	@param ioList
	*		The ouput Occurrence list.
	*/
	ExportedByCommonFuncMod void GetOccRecursively( CATIPLMNavOccurrence_var ispOcc, CATUnicodeString iRefType, CATListPtrCATIPLMNavOccurrence& ioList);



	/**
	* The mehtod to judge the occurrence
	* <br><b>Role</b>: 
	* @param iocc
	*	the input occurrence
	* @return
	*	true if the input occurrence should be accepted
	*/
	typedef bool (*OccJudgeMethod)(CATIPLMNavOccurrence_var iocc);


	/**
	* Get child Occurrences Recursively with given judgement method,
	* The function will filter the repeated object.
	*	@param ispOcc
	*		The input Occ to be searched.
	*	@param iMethod
	*		The judgement method
	*	@param ioList
	*		The ouput Occurrence list.
	*/
	ExportedByCommonFuncMod void GetOccRecursively( CATIPLMNavOccurrence_var ispOcc, OccJudgeMethod iMethod, CATListPtrCATIPLMNavOccurrence& ioList);

};



//-----------------------------------------------------------------------

#endif
