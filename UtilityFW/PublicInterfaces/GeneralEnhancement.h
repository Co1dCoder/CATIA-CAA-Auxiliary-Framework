//===================================================================
// COPYRIGHT Tony 2017/03/24
//===================================================================
// GeneralEnhancement.cpp
// Header definition of class GeneralEnhancement
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/03/24 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef GeneralEnhancement_H
#define GeneralEnhancement_H

#include "CommonFuncMod.h"

#include <vector>
#include <fstream>
#include <iostream>
using std::cout;
using std::endl;

// System
#include "CATBaseUnknown.h"
#include "CATBaseUnknown_var.h"
#include "CATUnicodeString.h"
#include "CATCollec.h"
#include "CATListOfCATUnicodeString.h"
#include "CATGetEnvValue.h"
#include "CATLib.h"

// Dialog
#include "CATDlgNotify.h"
#include "CATDlgMultiList.h"

// AfrFoundation
#include "CATApplicationFrame.h"
#include "CATFrmEditor.h"

// CATPLMComponentInterfaces 
#include "CATListPtrCATIPLMNavReference.h"
#include "CATListPtrCATIPLMComponent.h"


namespace JNCTonySpace{


	enum MsgboxType
	{
		InformationMsg = 0,
		WarningMsg = 1,
		ErrorMsg = 2
	};

	/**
	* Retrieves the target file path in an environment variable.
	*   @param iResourceWord 
	*      The Environment variable's Name.
	*   @param iFileName
	*      The Target file's FULL name.
	*   @param oPath
	*      The returned Target file's path.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if Finding the file successfully.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if file does not exist in the given environment variable.
	*   <dt><tt>E_FAIL</tt>        <dd>if not find the given environment variable.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetFilePathFromEnv(CATUnicodeString iResourceWord,CATUnicodeString iFileName,CATUnicodeString &oPath);

	/**
	* Display a MessageBox in the main window.
	* <br><b>Role</b>: The Box only contains OK button.
	*   @param iMessage 
	*      The Message string to be displayed.
	*   @param MsgType
	*      The Box's Type. 
	*   <dl>
	*   <dt><tt>InformationMsg</tt>		<dd>Display an Information box.(0)
	*   <dt><tt>WarningMsg</tt>			<dd>Display a Warning box.(1)
	*   <dt><tt>ErrorMsg</tt>			<dd>Display an Error box.(2)
	*   </dl>.
	*/
	ExportedByCommonFuncMod void MyMsgBox( CATUnicodeString iMessage, MsgboxType MsgType = InformationMsg);

	/**
	* Convert CATPathElement into string, the string will be linked by '\'.
	* <br><b>Role</b>: After the converts, the cursor will 
	* be set to the last object of the PathElement.
	*   @param ipPath 
	*      The input CATPathElement.
	*   @param oPathString
	*      The output path string. 
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if Converting the path successfully.
	*   <dt><tt>E_FAIL</tt>        <dd>if the path is NULL.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetPathString(CATPathElement * ipPath, CATUnicodeString & oPathString);

	/**
	* Hide or show object
	* <br><b>Role</b>: 
	* @param ispObj
	*	The object 
	* @param bShow
	*	Use TRUE to show the object, use FALSE to hide the object. default is FALSE
	* 
	*/
	ExportedByCommonFuncMod void HideObject(CATBaseUnknown_var ispObj, CATBoolean bShow = FALSE);


	/**
	* Read Registery value
	* <br><b>Role</b>: 
	* @param iHKey
	*	 Defined in winreg.h
	* @param &iPath
	*    The full path of registery item
	* @param &iName
	*    The registery item's attribute name
	* @param iType
	*	 REG_SZ or REG_DWORD
	* @param &oValue
	*    The output attribute value
	* @return
	* <dl>
	* <dt><code>S_OK</code> <dd> If getting the value successfully
	* <dt><code>E_FAIL</code> <dd> Otherwise
	* </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetRegValue(HKEY iHKey, const CATUnicodeString &iPath, const CATUnicodeString &iName, DWORD iType, CATUnicodeString &oValue);


	/**
	* Open a new process to excute program
	* <br><b>Role</b>: 
	* @param iFileFullPath
	*	 The full path of program, like D:\\xxx.exe
	* @param iParamStr
	*	 String represent the input params
	* @param iIsWaited
	*	 Make current thread block to wait for new process
	* @param opProcess
	*	 The handle of the new process
	* 
	*/
	ExportedByCommonFuncMod void ExecuteShell(const CATUnicodeString iFileFullPath, const CATUnicodeString iParamStr, CATBoolean iIsWaited, HANDLE * opProcess = NULL);

	/**
	* Get selected rows' index in given multilist.
	* <br><b>Role</b>: 
	* @param iDlgList
	*	 The input multilist pointer
	* @param ioListIdx
	*	 vector contains selected rows' index.
	* 
	*/
	ExportedByCommonFuncMod void GetMultiListSelectedRowID(CATDlgMultiList* iDlgList, std::vector<int>& ioListIdx );


};


//-----------------------------------------------------------------------

#endif
