//===================================================================
// COPYRIGHT Tony 2018/05/14
//===================================================================
// CsvReader.cpp
// Header definition of class CsvReader
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/05/14 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CsvReader_H
#define CsvReader_H

#include "CommonToolMod.h"

#include <map>
using std::map;
#include "CATUnicodeString.h"

#include <string>
#include <algorithm>
#include <fstream>
#include <vector>

using std::string;
using std::ifstream;
using std::vector;

#include "CATBoolean.h"
#include "CATCollec.h"
#include "CATListOfCATUnicodeString.h"

typedef std::vector<std::map<CATUnicodeString, CATUnicodeString> > CsvData;

enum FileState
{
	ReadOK = 0,
	InvalidFileName = 1,
	ReadingError = 2,
	FormatError = 3
};

/**
 *@brief  ：Csv文件读取器，读取csv文件的行、列以及指定的数据
*/
class ExportedByCommonToolMod CsvReader
{

public:
	// Standard destructors
	// -------------------------------------
	virtual ~CsvReader ();

	/**
	 *@brief  ：获取CsvReader指针，CsvReader保持为单例模式，请务必不要delete返回的指针
	 *			读取器不会重复读取文件，如果需要重新读取请使用ClearCache方法
	 *@return ：CsvReader指针
	*/
	static CsvReader* GetCsvReader();

	/**
	 *@brief  ：清空缓存
	 *@return ：空
	*/
	static void ClearCache();

	/**
	 *@brief  ：检查csv文件状态，csv文件至少包含两行（列名和数据）
	 *@author ：Tony
	 *@param  ：iFileName: csv文件完整路径
	 *@return ：状态枚举类型
	*/
	FileState CheckCsvFile(CATUnicodeString iFileName);

	/**
	 *@brief  ：读取指定行列的单元格内容
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：iRowKeyColumnHead : 指定用于定位哪一行的列名
	 *@param  ：iRowKey : 指定用于定位哪一行的指定列下的值
	 *@param  ：iColumKey : 指定列名
	 *@return ：找到的单元格内容
	*/
	CATUnicodeString ReadCsvCell(CATUnicodeString iFileName, CATUnicodeString iRowKeyColumnHead, CATUnicodeString iRowKey, CATUnicodeString iColumKey);

	/**
	 *@brief  ：读取指定行内容
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：iColumnHead : 指定用于定位哪一行的列名
	 *@param  ：iRowKey : 指定用于定位哪一行的指定列下的值
	 *@param  ：oRowValueList : 得到的list值
	 *@return ：HRESULT
	*/
	HRESULT ReadCsvRow(CATUnicodeString iFileName, CATUnicodeString iColumnHead, CATUnicodeString iRowKey, CATListOfCATUnicodeString& oRowValueList);

	/**
	 *@brief  ：读取指定列内容，排除空值
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：iColumnHead : 列名
	 *@param  ：oColumnValueList : 得到的list值
	 *@return ：HRESULT
	*/
	HRESULT ReadCsvColumn(CATUnicodeString iFileName, CATUnicodeString iColumHead, CATListOfCATUnicodeString& oColumnValueList);

	/**
	 *@brief  ：读取指定列内容，排除空值和重复值
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：iColumnHead : 列名
	 *@param  ：oColumnValueList : 得到的list值
	 *@return ：HRESULT
	*/
	HRESULT ReadCsvColumnWithUniqueValue(CATUnicodeString iFileName, CATUnicodeString iColumHead, CATListOfCATUnicodeString& oColumnValueList);

	/**
	 *@brief  ：检查是否存在指定内容
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：iHeadList : 列名list
	 *@param  ：iKeyList : 值list, 必须与iHeadList的size、顺序相同
	 *@return ：如果存在某一行满足所有列、值对应关系, 返回true
	*/
	bool CheckSpecifyContent(CATUnicodeString iFileName, CATListOfCATUnicodeString& iHeadList, CATListOfCATUnicodeString& iKeyList);

	/**
	 *@brief  ：取得第一行列名
	 *@author ：Tony
	 *@param  ：iFileName : Csv文件完整路径
	 *@param  ：oHeadList : 列名list
	 *@return ：执行正常返回S_OK
	*/
	HRESULT ReadCsvHeads(LPCSTR iFileName,CATListOfCATUnicodeString& oHeadList);

	/**
	 *@brief  ：读取Csv文件并包装为指定形式
	 *@author ：Tony
	 *@param  ：iFileName(Csv文件完整路径); oData(数据类型指针，必须传入空指针)
	 *@return ：HRESULT
	*/
	HRESULT ReadCsvData(LPCSTR iFileName, CsvData*& oData);

private:
	// Copy constructor and equal operator
	// -----------------------------------
	CsvReader (CsvReader &);
	CsvReader& operator=(CsvReader&);
	CsvReader ();

	// 检查csv格式
	CATBoolean IsCsvFile(LPCSTR iFileName);

	// 内部文件记录map
	map<CATUnicodeString, CsvData> m_Recorder;

};

//-----------------------------------------------------------------------

#endif
