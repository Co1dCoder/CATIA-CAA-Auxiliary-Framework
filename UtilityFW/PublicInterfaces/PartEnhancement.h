//===================================================================
// COPYRIGHT Tony 2016/11/18
//===================================================================
// PartEnhancement.cpp
// Header definition of class DownReference
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016/11/18 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef PartEnhancement_H
#define PartEnhancement_H

#include "CommonFuncMod.h"

// System
#include "CATBaseUnknown.h"
#include "CATBaseUnknown_var.h"
#include "CATUnicodeString.h"

//-----------------------------------------------------------------------
class CATIPLMNavReference;
class CATIPLMNavReference_var;
class CATIPLMNavRepReference;
class CATIPLMNavRepReference_var;
class CATIMmiMechanicalFeature_var;
class CATICkeParm_var;
class CATIBodyRequest_var;
class CATMathPoint;
class CATMathLine;
class CATMathPlane;
class CATListValCATBaseUnknown_var;
class CATIPLMNavOccurrence;
class CATIPLMNavOccurrence_var;
class CATIParmPublisher_var;
// --------------

namespace JNCTonySpace{

	/**
	* The Downward Reading Degree of Reference
	* @param RepIns
	*   Get First RepInstance of given Reference.
	* @param RepRef
	*   Get RepReference of given Reference's first RepInstance.
	* @param RepRefWithEditMode
	*   Get RepReference with it's loading mode changed to EditMode.
	*/
	enum DownwardDegree
	{
		RepIns = 0,
		RepRef = 1,
		RepRefWithEditMode = 2
	};

	 
	/**
	* Reading downward a Reference.
	*   @param iPLMRef 
	*      The Reference to be read(Pointer).
	*   @param iDegree
	*      The Reading degree. 
	*   <dl>
	*   <dt><tt>RepIns</tt>				<dd>Get RepInstance of given Reference.(0)
	*   <dt><tt>RepRef</tt>				<dd>Get RepReference of given Reference's RepInstance.(1)
	*   <dt><tt>RepRefWithEditMode</tt> <dd>Get RepReference with it's loading mode changed to EditMode.(2)
	*   </dl>.
	*	@param ppv
	*   The address where the returned pointer to the interface is located.
	*	@param iPos
	*   The position of RepInstance.The default Position is 1.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if Reading succeeds.
	*   <dt><tt>E_NOINTERFACE</tt> <dd>if the interface does not exist
	*   <dt><tt>E_FAIL</tt>        <dd>if input reference is NULL or other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT DownwardRef(CATIPLMNavReference *iPLMRef, DownwardDegree iDegree, void** oppv, int iPos = 1);

	/**
	* Reading downward a Reference.
	*   @param iPLMRef 
	*      The Reference to be read(Smart Pointer).
	*   @param iDegree
	*      The Reading degree. 
	*   <dl>
	*   <dt><tt>RepIns</tt>				<dd>Get RepInstance of given Reference.(0)
	*   <dt><tt>RepRef</tt>				<dd>Get RepReference of given Reference's RepInstance.(1)
	*   <dt><tt>RepRefWithEditMode</tt> <dd>Get RepReference with it's loading mode changed to EditMode.(2)
	*   </dl>.
	*	@param ppv
	*   The address where the returned pointer to the interface is located.
	*	@param iPos
	*   The position of RepInstance.The default Position is 1.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if Reading succeeds.
	*   <dt><tt>E_NOINTERFACE</tt> <dd>if the interface does not exist
	*   <dt><tt>E_FAIL</tt>        <dd>if input reference is NULL or other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT DownwardRef(CATIPLMNavReference_var& spPLMRef, DownwardDegree iDegree, void** oppv, int iPos = 1);

	/**
	* Reading downward a Reference.
	*   @param iPLMRef 
	*      The Reference to be read(Pointer).
	*   @param iDegree
	*      The Reading degree. 
	*   <dl>
	*   <dt><tt>RepIns</tt>				<dd>Get RepInstance of given Reference.(0)
	*   <dt><tt>RepRef</tt>				<dd>Get RepReference of given Reference's RepInstance.(1)
	*   <dt><tt>RepRefWithEditMode</tt> <dd>Get RepReference with it's loading mode changed to EditMode.(2)
	*   </dl>.
	*	@param ospOutput
	*   The output Smart Pointer.
	*	@param iPos
	*   The position of RepInstance.The default Position is 1.
	*/
	ExportedByCommonFuncMod void DownwardRef(CATIPLMNavReference *iPLMRef, DownwardDegree iDegree, CATBaseUnknown_var& spOutput, int iPos = 1);

	/**
	* Reading downward a Reference.
	*   @param iPLMRef 
	*      The Reference to be read(Smart Pointer).
	*   @param iDegree
	*      The Reading degree. 
	*   <dl>
	*   <dt><tt>RepIns</tt>				<dd>Get RepInstance of given Reference.(0)
	*   <dt><tt>RepRef</tt>				<dd>Get RepReference of given Reference's RepInstance.(1)
	*   <dt><tt>RepRefWithEditMode</tt> <dd>Get RepReference with it's loading mode changed to EditMode.(2)
	*   </dl>.
	*	@param ospOutput
	*   The output Smart Pointer.
	*	@param iPos
	*   The position of RepInstance.The default Position is 1.
	*/
	ExportedByCommonFuncMod void DownwardRef(CATIPLMNavReference_var& spPLMRef, DownwardDegree iDegree, CATBaseUnknown_var& spOutput, int iPos = 1);

	/**
	* Retrive Reference's aggregated mechanical part.
	*   @param iPLMRef 
	*      The Reference to be read.
	*	@param spOutPart
	*		The output mechanical part feature.
	*	@param iPos
	*		The position of RepInstance.The default Position is 1.
	*/
	ExportedByCommonFuncMod void GetMechPartFromRef(CATIPLMNavReference_var spPLMRef, CATIMmiMechanicalFeature_var& spOutPart, int iPos = 1);

	/**
	* Get a Parameter(CATICkeParm_var) from Root ParameterSet.
	*   @param ispPLMRepRef 
	*      The RepReference of target parameter.
	*   @param iParaName
	*      The target parameter's name.
	*	@param ospCkeParm
	*   The output Parameter(Smart Pointer).
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if getting parameter succeeds.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if the Parameter doesn't exist.
	*   <dt><tt>E_FAIL</tt>        <dd>if input repreference is NULL or other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTargetParameter(CATIPLMNavRepReference_var& ispPLMRepRef, CATUnicodeString iParaName, CATICkeParm_var& ospCkeParm);

	/**
	* Get a Parameter(CATICkeParm_var) from Root ParameterSet.
	*   @param ispPublisher 
	*      The mechanical part.
	*   @param iParaName
	*      The target parameter's name.
	*	@param ospCkeParm
	*   The output Parameter(Smart Pointer).
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if getting parameter succeeds.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if the Parameter doesn't exist.
	*   <dt><tt>E_FAIL</tt>        <dd>if input repreference is NULL or other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTargetParameter(CATIParmPublisher_var& ispPublisher, CATUnicodeString iParaName, CATICkeParm_var& ospCkeParm);

	/**
	* Get a Parameter(CATICkeParm_var) from Mechanical feature. 
	* Only feature's direct parameter can be found.
	*   @param ispMechFea 
	*      The Mechanical Feature of target parameter.
	*   @param iParaName
	*      The target parameter's name.
	*	@param ospCkeParm
	*   The output Parameter(Smart Pointer).
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if getting parameter succeeds.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if the Parameter doesn't exist.
	*   <dt><tt>E_FAIL</tt>        <dd>if input repreference is NULL or other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTargetParameter(CATIMmiMechanicalFeature_var& ispMechFea, CATUnicodeString iParaName, CATICkeParm_var& ospCkeParm);

	/**
	* Get a MathPoint from Mechanical feature or Topo or CATPoint. 
	*/
	ExportedByCommonFuncMod HRESULT GetMathPoint(CATBaseUnknown_var ispObject,CATMathPoint& oMathPoint);

	/**
	* Get a MathLine from Mechanical feature or Topo or CATLine. 
	*/
	ExportedByCommonFuncMod HRESULT GetMathLine(CATBaseUnknown_var ispObject,CATMathLine& oMathLine);

	/**
	* Get a MathPlane from Mechanical feature or Topo or CATPlane. 
	*/
	ExportedByCommonFuncMod HRESULT GetMathPlane(CATBaseUnknown_var ispObject,CATMathPlane& oMathPlane);

	/**
	* Get Object's father(owner) in the Tree structure 
	* Only feature's direct parent can be found.
	* Note that this function may fail if the object's related tree node can't be seen directly(collapsed)
	* Use GetPathFather instead
	*   @param ispObject 
	*      The input object, it has to have a representation in Tree.
	*   @param iospFather
	*      The input object's father object.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if the father is found.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if the input object has no tree representation(CATIGraphNode).
	*   <dt><tt>E_FAIL</tt>        <dd>if the object has no father in tree.
	*   <dt><tt>E_UNEXPECTED</tt>  <dd>other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTreeFather(CATBaseUnknown_var ispObject,CATBaseUnknown_var& iospFather);

	/**
	* Get Object's children in the Tree structure 
	* Only feature's direct children can be found.
	* Note that this function may fail if the object's related tree node can't be seen directly(collapsed)
	* Use CATINavigateObject instead
	*   @param ispObject 
	*      The input object, it has to have a representation in Tree.
	*   @param ioChildrenList
	*      The input object's sub objects.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>find the children successfully
	*   <dt><tt>S_FALSE</tt>        <dd>if the object has no children in tree.
	*   <dt><tt>E_INVALIDARG</tt>  <dd>if the input object has no tree representation(CATIGraphNode).
	*   <dt><tt>E_UNEXPECTED</tt>  <dd>other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetTreeChildren(CATBaseUnknown_var ispObject,CATListValCATBaseUnknown_var& ioChildrenList);

	/**
	* Get Object's father(owner) by CATPath
	* Only feature's direct parent can be found.
	* Note that this function can not retrieve PLM Object from Representation Object.
	*   @param ispObject 
	*      The input object, it should have CATIBuildPath interface.
	*   @param iospFather
	*      The input object's father object.
	*	@return
	*   <dl>
	*   <dt><tt>S_OK</tt>          <dd>if the father is found.
	*   <dt><tt>E_NOINTERFACE</tt> <dd>if the input object has no CATIBuildPath interface.
	*   <dt><tt>E_FAIL</tt>        <dd>if the object has no father.
	*   <dt><tt>E_UNEXPECTED</tt>  <dd>other ERRORs.
	*   </dl>
	*/
	ExportedByCommonFuncMod HRESULT GetPathFather(CATBaseUnknown_var ispObject,CATBaseUnknown_var& iospFather);


	/**
	* Copy mechanical feature
	* <br><b>Role</b>: The internal function has considered the transformation of Axis
	* @param ispSourceObject
	*	 The object to be copied
	* @param ispTargetObject
	*	 The father object of the new feature
	* @param ispSourceOcc
	*	 The source occurrence
	* @param ispTargetOcc
	*	 The target occurrence
	* @param iospCopyResult
	*	 The result feature
	* @param WithLink
	*	 Copy with link or not
	*/
	ExportedByCommonFuncMod void CopyFeature(CATIMmiMechanicalFeature_var ispSourceObject,
											CATIMmiMechanicalFeature_var ispTargetObject,
											CATIPLMNavOccurrence_var ispSourceOcc,
											CATIPLMNavOccurrence_var ispTargetOcc,
											CATIMmiMechanicalFeature_var &iospCopyResult,
											CATBoolean WithLink = FALSE);
};



#endif
